<div>
  <div style="text-align:center;">
    <h1>The Faster Query Method</h1>
    <h4>Loops, Joins, and Includes</h4>
    <p><em>Gauge their speed in four difference scenarios</em></p>
  </div>
  <div class="situations">

<!-- ********************************************************* -->

    <div class="square-focus">
      <h3 class="square-header">Scenarios 1 & 2: Index of Artifacts</h3>
      <div class="data-window span4">
        <h4>Scenario 1</h4>
        <%= render 'session/scenario_one.html.erb' %>
      </div>
      <div class="data-window span4">
        <h4>Scenario 2</h4>
        <%= render 'session/scenario_two.html.erb' %>
      </div>
      <div class="situation span8">
        <h4 class="situation-header">More About the Results</h4>
        <p>To find all artists, loop does the least work necessary. By contrast, join additionally links an extra table, and includes fetches all the data from the other table, which can take a while. 
        Scenario 1 demonstrates that when all you really need is the info from one model, loops are the fastest, as doing more is superfluous.</p>
        
        <p>However, when you need data from two models, includes is the best. Includes is significantly faster because it doesn't need to perform additional database queries to fetch data, as the data it needs is already loaded.</p>
      </div>
    </div>

<!-- ********************************************************* -->
    
    <div class="square-focus">
      <h3 class="square-header">Scenarios 3 & 4: Index of Artists</h3>
      <div class="data-window span4">
        <h4>Scenario 3</h4>
        <%= render 'session/scenario_three.html.erb' %>
      </div>
      <div class="data-window span4">
        <h4>Scenario 4</h4>
        <%= render 'session/scenario_four.html.erb' %>
      </div>
      <div class="situation span8">
        <h4 class="situation-header">More About the Results</h4>
        <p>Joins can be a good decision over loops, even if you're only looking for one model's data. A joins query ignores model instances that lack that 2nd model as an association. For instance, the joins method here quickly finds artists with commissions and ignores those without.</p>
        
        <p>When fetching data from 2 models, includes wins by a long shot in terms of speed. Just as before, it grabs all the data in one query, thus avoiding expesive query calls in the future when it needs that data. </p>
      </div>

    </div>

<!-- ********************************************************* -->

    <% if @selected_queries.reject{ |e| e.blank?}.present? %>
      <h2>You selected...</h2>
      <dl>
        <% @selected_queries.each_with_index do |qry, i| %>
          <div class="s-select">
            <dt class="center"><%= "Scenario #{i + 1}" %></dt>
            <dd class="post-select center"><%= qry %></dd>
          </div>
        <% end %>
      </dl>
    <% end %>

    <%= form_tag sessions_path, method: "post" do %>

      <div id="s-submit">
      <%= submit_tag "Get New Query Times (this may take a while)", :class => "btn btn-large btn-block btn-primary", :id => 's-submit' %>
      </div>

      <span id="or">OR</span>

      <div id="s-submit">
        <%= link_to "Go Back", new_session_path, :class => "btn btn-large btn-block btn-inverse", :id => 's-submit' %>
      </div>
    <% end %>
  </div>
</div>